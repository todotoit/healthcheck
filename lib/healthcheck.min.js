!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("later")):"function"==typeof define&&define.amd?define("healthcheck",["later"],t):"object"==typeof exports?exports.healthcheck=t(require("later")):e.healthcheck=t(e.later)}("undefined"!=typeof self?self:this,function(e){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(1),i={interval:3600,autorun:!0,callback:!1},u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options={...i,...t},!1!==this.options.autorun&&this.start()}var t,n,u;return t=e,(n=[{key:"check",value:function(){var e=new XMLHttpRequest;e.onreadystatechange=function(){4===e.readyState&&200===e.status&&this.options.callback&&this.callback(e.responseText)},e.open("GET",this.options.url,!0),e.send(null)}},{key:"stop",value:function(){this.timer.clear()}},{key:"start",value:function(){var e,t=this;e=isNaN(this.options.interval)?o.parse.text(this.options.interval):o.parse.recur().every(this.options.interval).second(),this.timer=o.setInterval(function(){return t.check()},e)}}])&&r(t.prototype,n),u&&r(t,u),e}();t.default=u,e.exports=t.default},function(t,n){t.exports=e}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,