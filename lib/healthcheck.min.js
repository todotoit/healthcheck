!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("no-cov-later")):"function"==typeof define&&define.amd?define("healthcheck",["no-cov-later"],t):"object"==typeof exports?exports.healthcheck=t(require("no-cov-later")):e.healthcheck=t(e.later)}("undefined"!=typeof self?self:this,(function(e){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,o=(n=r(1))&&n.__esModule?n:{default:n};function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function u(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var c={interval:3600,autorun:!0,callback:!1,method:"GET",fail:"/fail"},l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){u(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({},c,{},t),!1!==this.options.autorun&&this.start()}var t,r,n;return t=e,(r=[{key:"check",value:function(){this.request(this.options.url,this.options.callback)}},{key:"error",value:function(){var e=this.options.fail.indexOf("://")>-1?this.options.fail:this.options.url+this.options.fail;this.request(e)}},{key:"stop",value:function(){this.timer.clear()}},{key:"start",value:function(){var e,t=this;e=isNaN(this.options.interval)?o.default.parse.text(this.options.interval):o.default.parse.recur().every(this.options.interval).second(),this.timer=o.default.setInterval((function(){return t.check()}),e)}},{key:"request",value:function(e,t){var r=new XMLHttpRequest;r.onreadystatechange=function(){4===r.readyState&&200===r.status&&t&&this.callback(r.responseText)},r.open("GET",e,!0),r.send(null)}}])&&a(t.prototype,r),n&&a(t,n),e}();t.default=l,e.exports=t.default},function(t,r){t.exports=e}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,